/*
	Code should be used only for educational, documentation and modding purposes
*/


sgb_detect:
	ld bc, 0x8901				; multitap on
	call sgb_command


; =========================================================
; =========================================================


	ld c, 0x00

	ld a, (c)					; joypad id
	and a, 0x03
	cp a, 0x03
	jr nz, @@exit


	ld a, 0x20					; reset
	ld (c), a

	ld a, (c)
	ld a, (c)
	call sgb_wait

	ld a, 0x30					; pulse
	ld (c), a
	call sgb_wait


	ld a, 0x10					; joypad
	ld (c), a
	ld a, (c)
	ld a, (c)
	ld a, (c)
	ld a, (c)
	ld a, (c)
	call sgb_wait

	ld a, 0x30					; pulse
	ld (c), a

	ld a, (c)
	ld a, (c)
	ld a, (c)
	call sgb_wait


	ld a, (c)					; read id
	and a, 0x03
	cp a, 0x03


; =========================================================
; =========================================================


@@exit:
	push af						; nz = yes


	ld bc, 0x8900				; multitap off
	call sgb_command


	pop af
	ret



; #########################################################
; #########################################################



sgb_command:
	ld hl, 0xc002				; oam memory  (c000)
	xor a



@@loop:
	ldi (hl), a					; wipe

	bit 4, l					; c010
	jr z, @@loop



	ld a, b
	ld (0xc000), a

	ld a, c
	ld (0xc001), a


; =========================================================
; =========================================================


	xor a						; reset pulse
	ldh (0x00), a
	ld a, 0x30
	ldh (0x00), a


	ld b, 0x10					; 16 bytes
	ld c, 0x00					; ff00
	ld hl, 0xc000				; command


; =========================================================
; =========================================================


@@byte_send:
	ld e, 0x08					; 8 bits

	ldi a, (hl)
	ld d, a



@@bit_send:
	bit 0, d

	ld a, 0x10					; 0 bit
	jr nz, @@data_send

	add a, a					; 1 bit



@@data_send:
	ld (c), a

	ld a, 0x30					; pulse
	ld (c), a


	rr d						; lsb shifter
	dec e
	jr nz, @@bit_send


	dec b
	jr nz, @@byte_send


; =========================================================
; =========================================================


	ld a, 0x20					; stop bit (0)
	ld (c), a

	ld a, 0x30					; pulse
	ld (c), a


	ret



; #########################################################
; #########################################################



sgb_wait:
	ld de, 0x1b58 * 4/5			; double speed mode


@@loop:
	nop
	nop
	nop

	dec de

	ld a, d
	or e
	jr nz, @@loop

	ret



; ##########################################################
; ##########################################################



sgb_init:
	ld a, 0x01							; bg on, lcd off
	ldh (0x40), a

	ld a, 0xe4							; bgp color
	ldh (0x47), a


	ld hl, 0x9800						; vram tilemap
	ld de, 0x000c						; row bump

	ld a, 0x80							; start tile #  (8800-9800)
	ld c, 0x0d							; height


; ========================================================
; ========================================================


@@row:
	ld b, 0x14							; width


@@loop:
	ldi (hl), a
	inc a

	dec b
	jr nz, @@loop
	
	add hl, de

	dec c
	jr nz, @@row


	ret



; #########################################################
; #########################################################



sgb_upload:
	ld a, 0x81							; bg on, lcd on
	ldh (0x40), a


	di
	call sgb_command
	call sgb_wait						; snes i/o



@@loop:
	ldh a, (0x41)						; wait vblank
	and a, 0x03
	cp a, 0x01
	jr z, @@loop


	ld a, 0x01							; bg on, lcd off
	ldh (0x40), a

	xor a								; reset irqs
	ldh (0x0f), a

	reti
